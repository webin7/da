TERMWORK 5       
#include <stdio.h>
#include <stdlib.h>
#define MAX 20
#define INFINITY 999

int cost[MAX][MAX], visited[MAX];

void prims(int cost[][MAX], int n) {
    int i, j, ne = 1;
    int a, b, u, v, min, mincost = 0;
    for (i = 2; i <= n; i++)
        visited[i] = 0;

    printf("\nEdges of the spanning tree - \n");
    visited[1] = 1;  // Start with vertex 1

    while (ne < n) {
        min = INFINITY;

        // Find the edge with the minimum weight
        for (i = 1; i <= n; i++) {
            if (visited[i] == 1) {
                for (j = 1; j <= n; j++) {
                    if (visited[j] == 0 && cost[i][j] < min) {
                        min = cost[i][j];
                        a = i;
                        b = j;
                    }
                }
            }
        }

        if (visited[b] == 0) {
            printf("%d. EDGE (%d,%d) = %d\n", ne++, a, b, min);
            mincost += min;
            visited[b] = 1;  // Mark the vertex as visited
        }
        cost[a][b] = cost[b][a] = INFINITY;  // Remove the edge from consideration
    }

    printf("\nMINIMUM COST = %d\n", mincost);
}

int main() {
    int i, j, n;
    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the cost matrix (Enter 999 for INFINITY):\n");
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= n; j++) {
            scanf("%d", &cost[i][j]);
            if (cost[i][j] == 0 && i != j) {
                cost[i][j] = INFINITY;  // No edge between different nodes
            }
        }
    }

    prims(cost, n);

    return 0;
}

OUTPUT =>

Enter the number of vertices: 4
Enter the cost matrix (Enter 999 for INFINITY):
999 1 4 2
1 999 999 999
4 999 999 3
2 999 3 999

Edges of the spanning tree -
1. EDGE (1,2) = 1
2. EDGE (1,4) = 2
3. EDGE (4,3) = 3

MINIMUM COST = 6
