TERMWORK 10     
#include <stdio.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *left;
    struct Node *right;
};

struct Node* createNode(int data){
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data=data;
    newNode->left=NULL;
    newNode->right=NULL;
    return newNode;
};

void insert(struct Node **root, int data){
    struct Node *newNode = createNode(data);
    if(*root == NULL){
        *root = newNode;
        return;
    }
    struct Node *current = *root;
    while(1){
        if(data<current->data){
            if(current->left==NULL){
                current->left=newNode;
                break;
            }
            else{
                current=current->left;
            }
        }
        else{
            if(current->right==NULL){
                current->right=newNode;
                break;
            }
            else{
                current=current->right;
            }
        }
    }
}

void inOrder(struct Node *root){
    if(root!=NULL){
        inOrder(root->left);
        printf("%d ",root->data);
        inOrder(root->right);
    }
}

void freeTree(struct Node *root){
    if(root!=NULL){
       freeTree(root->left);
       freeTree(root->right);
       free(root);
    }
}

int main()
{
    int arr[]={5,3,7,1,4,6,8};
    int n=sizeof(arr)/sizeof(arr[0]);
    struct Node *root = NULL;
    for(int i=0;i<n;i++)
        insert(&root,arr[i]);
    printf("Sorted Array : ");
    inOrder(root);
    printf("\n");
    freeTree(&root);
    return 0;
}

OUTPUT =>

Sorted Array : 1 3 4 5 6 7 8