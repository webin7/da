TERMWORK 7                   
#include <stdio.h>

#define INF 999
#define MAX 10

void floyd(int p[MAX][MAX], int n) {
    for(int k = 0; k < n; k++)
        for(int i = 0; i < n; i++)
            for(int j = 0; j < n; j++)
                if(p[i][j] > p[i][k] + p[k][j])
                    p[i][j] = p[i][k] + p[k][j];
}

int main() {
    int p[MAX][MAX], n, e, u, v, w;

    printf("Enter number of vertices and edges: ");
    scanf("%d%d", &n, &e);

    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
            p[i][j] = (i == j) ? 0 : INF;

    for(int i = 0; i < e; i++) {
        printf("Enter edge (u v weight): ");
        scanf("%d%d%d", &u, &v, &w);
        p[u][v] = w;
    }

    floyd(p, n);

    printf("\nShortest path matrix:\n");
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++)
            printf("%d\t", (p[i][j] == INF) ? INF : p[i][j]);
        printf("\n");
    }

    return 0;
}


OUTPUT ==>

Enter the number of vertices: 3
Enter the number of edges: 9
Enter the end vertices of edge 1 with its weight: 1 1 0
Enter the end vertices of edge 2 with its weight: 1 2 4
Enter the end vertices of edge 3 with its weight: 1 3 5
Enter the end vertices of edge 4 with its weight: 2 1 2
Enter the end vertices of edge 5 with its weight: 2 2 0
Enter the end vertices of edge 6 with its weight: 2 3 999
Enter the end vertices of edge 7 with its weight: 3 1 999
Enter the end vertices of edge 8 with its weight: 3 2 2
Enter the end vertices of edge 9 with its weight: 3 3 0

Matrix of input data:
0       4       5
2       0       999
999     2       0

The shortest paths are:
0       4       5
2       0       7
4       2       0
